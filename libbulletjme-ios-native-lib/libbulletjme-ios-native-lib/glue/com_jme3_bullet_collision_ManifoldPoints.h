/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_jme3_bullet_collision_ManifoldPoints */

#ifndef _Included_com_jme3_bullet_collision_ManifoldPoints
#define _Included_com_jme3_bullet_collision_ManifoldPoints
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    createTestPoint
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_createTestPoint
  (JNIEnv *, jclass);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getAppliedImpulse
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getAppliedImpulse
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getAppliedImpulseLateral1
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getAppliedImpulseLateral1
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getAppliedImpulseLateral2
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getAppliedImpulseLateral2
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getCombinedFriction
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getCombinedFriction
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getCombinedRestitution
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getCombinedRestitution
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getCombinedRollingFriction
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getCombinedRollingFriction
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getCombinedSpinningFriction
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getCombinedSpinningFriction
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getContactMotion1
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getContactMotion1
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getContactMotion2
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getContactMotion2
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getDistance1
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getDistance1
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getFlags
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getFlags
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getIndex0
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getIndex0
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getIndex1
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getIndex1
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getLateralFrictionDir1
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getLateralFrictionDir1
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getLateralFrictionDir2
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getLateralFrictionDir2
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getLifeTime
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getLifeTime
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getLocalPointA
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getLocalPointA
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getLocalPointB
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getLocalPointB
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getNormalWorldOnB
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getNormalWorldOnB
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getPartId0
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getPartId0
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getPartId1
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getPartId1
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getPositionWorldOnA
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getPositionWorldOnA
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getPositionWorldOnADp
 * Signature: (JLcom/simsilica/mathd/Vec3d;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getPositionWorldOnADp
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getPositionWorldOnB
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getPositionWorldOnB
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    getPositionWorldOnBDp
 * Signature: (JLcom/simsilica/mathd/Vec3d;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_getPositionWorldOnBDp
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    isContactCalcArea3Points
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_isContactCalcArea3Points
  (JNIEnv *, jclass);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setAppliedImpulse
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setAppliedImpulse
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setAppliedImpulseLateral1
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setAppliedImpulseLateral1
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setAppliedImpulseLateral2
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setAppliedImpulseLateral2
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setCombinedFriction
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setCombinedFriction
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setCombinedRestitution
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setCombinedRestitution
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setCombinedRollingFriction
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setCombinedRollingFriction
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setCombinedSpinningFriction
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setCombinedSpinningFriction
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setContactCalcArea3Points
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setContactCalcArea3Points
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setContactMotion1
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setContactMotion1
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setContactMotion2
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setContactMotion2
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setDistance1
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setDistance1
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setFlags
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setFlags
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setLateralFrictionDir1
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setLateralFrictionDir1
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setLateralFrictionDir2
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setLateralFrictionDir2
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setLocalPointA
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setLocalPointA
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setLocalPointB
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setLocalPointB
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setNormalWorldOnB
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setNormalWorldOnB
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setPositionWorldOnA
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setPositionWorldOnA
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_collision_ManifoldPoints
 * Method:    setPositionWorldOnB
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_collision_ManifoldPoints_setPositionWorldOnB
  (JNIEnv *, jclass, jlong, jobject);

#ifdef __cplusplus
}
#endif
#endif
