/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_jme3_bullet_objects_PhysicsSoftBody */

#ifndef _Included_com_jme3_bullet_objects_PhysicsSoftBody
#define _Included_com_jme3_bullet_objects_PhysicsSoftBody
#ifdef __cplusplus
extern "C" {
#endif
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_NONE
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_NONE 0L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_01
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_01 1L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_02
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_02 2L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_03
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_03 4L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_04
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_04 8L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_05
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_05 16L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_06
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_06 32L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_07
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_07 64L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_08
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_08 128L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_09
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_09 256L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_10
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_10 512L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_11
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_11 1024L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_12
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_12 2048L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_13
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_13 4096L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_14
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_14 8192L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_15
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_15 16384L
#undef com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_16
#define com_jme3_bullet_objects_PhysicsSoftBody_COLLISION_GROUP_16 32768L
#undef com_jme3_bullet_objects_PhysicsSoftBody_massForStatic
#define com_jme3_bullet_objects_PhysicsSoftBody_massForStatic 0.0f
#undef com_jme3_bullet_objects_PhysicsSoftBody_numAxes
#define com_jme3_bullet_objects_PhysicsSoftBody_numAxes 3L
#undef com_jme3_bullet_objects_PhysicsSoftBody_vpe
#define com_jme3_bullet_objects_PhysicsSoftBody_vpe 2L
#undef com_jme3_bullet_objects_PhysicsSoftBody_vpt
#define com_jme3_bullet_objects_PhysicsSoftBody_vpt 3L
/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    addForce
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_addForce__JLcom_jme3_math_Vector3f_2
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    addForce
 * Signature: (JLcom/jme3/math/Vector3f;I)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_addForce__JLcom_jme3_math_Vector3f_2I
  (JNIEnv *, jclass, jlong, jobject, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    addVelocity
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_addVelocity__JLcom_jme3_math_Vector3f_2
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    addVelocity
 * Signature: (JLcom/jme3/math/Vector3f;I)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_addVelocity__JLcom_jme3_math_Vector3f_2I
  (JNIEnv *, jclass, jlong, jobject, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendCluster
 * Signature: (JILjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendCluster
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendFaces
 * Signature: (JILjava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendFaces__JILjava_nio_ByteBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendFaces
 * Signature: (JILjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendFaces__JILjava_nio_IntBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendFaces
 * Signature: (JILjava/nio/ShortBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendFaces__JILjava_nio_ShortBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendLinks
 * Signature: (JILjava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendLinks__JILjava_nio_ByteBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendLinks
 * Signature: (JILjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendLinks__JILjava_nio_IntBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendLinks
 * Signature: (JILjava/nio/ShortBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendLinks__JILjava_nio_ShortBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendNodes
 * Signature: (JILjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendNodes
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendTetras
 * Signature: (JILjava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendTetras__JILjava_nio_ByteBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendTetras
 * Signature: (JILjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendTetras__JILjava_nio_IntBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    appendTetras
 * Signature: (JILjava/nio/ShortBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_appendTetras__JILjava_nio_ShortBuffer_2
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    applyPhysicsRotation
 * Signature: (JLcom/jme3/math/Quaternion;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_applyPhysicsRotation
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    applyPhysicsScale
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_applyPhysicsScale
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    applyPhysicsTransform
 * Signature: (JLcom/jme3/math/Transform;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_applyPhysicsTransform
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    applyPhysicsTranslate
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_applyPhysicsTranslate
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    countNodesInCluster
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_countNodesInCluster
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    createEmpty
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_createEmpty
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    cutLink
 * Signature: (JIIF)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_cutLink
  (JNIEnv *, jclass, jlong, jint, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    finishClusters
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_finishClusters
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    generateBendingConstraints
 * Signature: (JIJ)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_generateBendingConstraints
  (JNIEnv *, jclass, jlong, jint, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    generateClusters
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_generateClusters
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getBounds
 * Signature: (JLcom/jme3/math/Vector3f;Lcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getBounds
  (JNIEnv *, jclass, jlong, jobject, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterAngularDamping
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterAngularDamping
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterCenter
 * Signature: (JILcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterCenter
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterLinearDamping
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterLinearDamping
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterMatching
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterMatching
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterMaxSelfImpulse
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterMaxSelfImpulse
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterNodeDamping
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterNodeDamping
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClusterSelfImpulse
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClusterSelfImpulse
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClustersLinearVelocities
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClustersLinearVelocities
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClustersMasses
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClustersMasses
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getClustersPositions
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getClustersPositions
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getFacesIndexes
 * Signature: (JLjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getFacesIndexes
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getLinksIndexes
 * Signature: (JLjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getLinksIndexes
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getMargin
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getMargin
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getMass
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getMass
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getMasses
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getMasses
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNbFaces
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNbFaces
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNbLinks
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNbLinks
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNbNodes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNbNodes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNbPinnedNodes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNbPinnedNodes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNbTetras
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNbTetras
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNodeLocation
 * Signature: (JILcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNodeLocation
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNodeNormal
 * Signature: (JILcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNodeNormal
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNodesNormals
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNodesNormals
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNodesPositions
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNodesPositions
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNodesVelocities
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNodesVelocities
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getNodeVelocity
 * Signature: (JILcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getNodeVelocity
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getPhysicsLocation
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getPhysicsLocation
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getPhysicsLocationDp
 * Signature: (JLcom/simsilica/mathd/Vec3d;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getPhysicsLocationDp
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getRestLengthScale
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getRestLengthScale
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getSoftBodyWorldInfo
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getSoftBodyWorldInfo
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getTetrasIndexes
 * Signature: (JLjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getTetrasIndexes
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getTotalMass
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getTotalMass
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getVolume
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getVolume
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    getWindVelocity
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_getWindVelocity
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    initDefault
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_initDefault
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    isCollisionAllowed
 * Signature: (JJ)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_isCollisionAllowed
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    listNodesInCluster
 * Signature: (JILjava/nio/IntBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_listNodesInCluster
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    randomizeConstraints
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_randomizeConstraints
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    releaseCluster
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_releaseCluster
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    releaseClusters
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_releaseClusters
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    resetLinkRestLengths
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_resetLinkRestLengths
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setClusterAngularDamping
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setClusterAngularDamping
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setClusterLinearDamping
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setClusterLinearDamping
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setClusterMatching
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setClusterMatching
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setClusterMaxSelfImpulse
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setClusterMaxSelfImpulse
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setClusterNodeDamping
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setClusterNodeDamping
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setClusterSelfImpulse
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setClusterSelfImpulse
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setMargin
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setMargin
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setMass
 * Signature: (JIF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setMass
  (JNIEnv *, jclass, jlong, jint, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setMasses
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setMasses
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setNodeVelocity
 * Signature: (JILcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setNodeVelocity
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setNormals
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setNormals
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setPhysicsLocation
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setPhysicsLocation
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setPhysicsLocationDp
 * Signature: (JLcom/simsilica/mathd/Vec3d;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setPhysicsLocationDp
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setPose
 * Signature: (JZZ)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setPose
  (JNIEnv *, jclass, jlong, jboolean, jboolean);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setRestLengthScale
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setRestLengthScale
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setSoftBodyWorldInfo
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setSoftBodyWorldInfo
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setTotalDensity
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setTotalDensity
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setTotalMass
 * Signature: (JFZ)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setTotalMass
  (JNIEnv *, jclass, jlong, jfloat, jboolean);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setVelocities
 * Signature: (JLjava/nio/FloatBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setVelocities
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setVelocity
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setVelocity
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setVolumeDensity
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setVolumeDensity
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setVolumeMass
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setVolumeMass
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     com_jme3_bullet_objects_PhysicsSoftBody
 * Method:    setWindVelocity
 * Signature: (JLcom/jme3/math/Vector3f;)V
 */
JNIEXPORT void JNICALL Java_com_jme3_bullet_objects_PhysicsSoftBody_setWindVelocity
  (JNIEnv *, jclass, jlong, jobject);

#ifdef __cplusplus
}
#endif
#endif
